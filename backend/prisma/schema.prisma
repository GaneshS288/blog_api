// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("TEST_DATABASE_URL")
}

model Users {
  id           Int     @id @default(autoincrement()) @db.Integer
  remote_id    String  @unique @default(uuid())
  name         String  @unique
  passwordHash String
  admin        Boolean @default(false)

  blogs    Blogs[]
  comments Comments[]

  @@map("users")
}

model Blogs {
  id         Int       @id @default(autoincrement())
  remote_id  String    @unique @default(uuid())
  title      String
  content    String
  likes      Int       @default(0)
  published  Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime?

  author    Users      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id Int
  comments  Comments[]

  @@map("blogs")
}

model Comments {
  id         Int       @id @default(autoincrement())
  remote_id  String    @unique @default(uuid())
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime?
  likes      Int       @default(0)

  author    Users @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id Int
  blog      Blogs @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  blog_id   Int

  comments          Comments[] @relation("comments")
  parent_comment    Comments?  @relation("comments", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  parent_comment_id Int

  @@map("comments")
}
